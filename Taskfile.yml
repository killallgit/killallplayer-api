version: '3'

dotenv: ['.env']

vars:
  BINARY_NAME: player-api
  MAIN_PATH: ./main.go
  BUILD_DIR: ./bin
  TEST_TIMEOUT: 10m

tasks:
  build:docker:
    desc: Build the application docker image
    cmds:
      - docker build -t ghcr.io/killallgit/killallplayer-api:latest .
      - docker push ghcr.io/killallgit/killallplayer-api:latest

  apply:k8s:
    desc: Build the application k8s image
    cmds:
      - kubectl --context admin@talos-proxmox-cluster -n killallplayer apply -k ./config --dry-run=client -o yaml

  serve:
    desc: Start the API server
    deps: [build]
    cmds:
      - ./{{.BUILD_DIR}}/{{.BINARY_NAME}} serve

  build:
    desc: Build the application binary
    cmds:
      - mkdir -p {{.BUILD_DIR}}
      - go build -o {{.BUILD_DIR}}/{{.BINARY_NAME}} {{.MAIN_PATH}}
    sources:
      - ./**/*.go
      - go.mod
      - go.sum
    generates:
      - "{{.BUILD_DIR}}/{{.BINARY_NAME}}"

  download:whisper-model:
    desc: Download Whisper base English model
    cmds:
      - mkdir -p models
      - |
        if [ ! -f models/ggml-base.en.bin ]; then
          echo "Downloading Whisper base English model..."
          curl -L -o models/ggml-base.en.bin https://huggingface.co/ggerganov/whisper.cpp/resolve/main/ggml-base.en.bin
          echo "Model downloaded successfully"
        else
          echo "Model already exists at models/ggml-base.en.bin"
        fi
    status:
      - test -f models/ggml-base.en.bin

  # Testing tasks
  test:
    desc: Run all tests
    env:
      CGO_LDFLAGS: "-w"
    cmds:
      - go test -v -race -timeout {{.TEST_TIMEOUT}} ./...

  # Linting and formatting
  lint:
    desc: Run golangci-lint
    deps: [install-tools]
    cmds:
      - golangci-lint run ./...

  fmt:
    desc: Format Go code
    cmds:
      - go fmt ./...
      - goimports -w .

  vet:
    desc: Run go vet
    cmds:
      - go vet ./...

  check:
    desc: Run all checks (fmt, vet, lint, test, docs)
    cmds:
      - task: fmt
      - task: vet
      - task: lint
      - task: test
      - task: docs:generate

  # Database tasks
  db:migrate:
    desc: Run database migrations
    cmds:
      - go run {{.MAIN_PATH}} migrate up

  db:rollback:
    desc: Rollback last database migration
    cmds:
      - go run {{.MAIN_PATH}} migrate down

  db:reset:
    desc: Reset database (drop and recreate)
    cmds:
      - rm -f ./data/podcast.db
      - task: db:migrate

  db:seed:
    desc: Seed database with test data
    cmds:
      - go run {{.MAIN_PATH}} seed

  # Documentation tasks
  docs:generate:
    desc: Generate Swagger documentation
    cmds:
      - swag init --output docs --parseDependency

  docs:serve:
    desc: Generate docs and serve the API to view Swagger UI
    deps: [docs:generate, build]
    cmds:
      - task: serve

  # Tool installation
  install-tools:
    desc: Install development tools
    cmds:
      - go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
      - go install golang.org/x/tools/cmd/goimports@latest
      - go install github.com/swaggo/swag/cmd/swag@latest

  # Default task
  default:
    desc: Show available tasks
    cmds:
      - task --list