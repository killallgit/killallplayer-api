basePath: /
definitions:
  auth.UserInfo:
    properties:
      email:
        type: string
      id:
        type: string
      permissions:
        items:
          type: string
        type: array
      role:
        type: string
    type: object
  clips.ClipResponse:
    description: Complete information about an audio clip
    properties:
      auto_labeled:
        example: false
        type: boolean
      created_at:
        example: "2025-09-25T16:36:45Z"
        type: string
      duration:
        example: 15
        type: number
      error_message:
        example: 'failed to download source audio: HTTP 403'
        type: string
      extracted:
        example: true
        type: boolean
      filename:
        example: clip_052f3b9b-cc02-418c-a9ab-8f49534c01c8.wav
        type: string
      label:
        example: advertisement
        type: string
      label_confidence:
        example: 0.85
        type: number
      label_method:
        example: manual
        type: string
      original_end_time:
        example: 45
        type: number
      original_start_time:
        example: 30
        type: number
      podcast_index_episode_id:
        example: 12345
        type: integer
      size_bytes:
        example: 480078
        type: integer
      source_episode_url:
        example: https://example.com/episode.mp3
        type: string
      status:
        enum:
        - queued
        - processing
        - ready
        - failed
        example: ready
        type: string
      updated_at:
        example: "2025-09-25T16:36:47Z"
        type: string
      uuid:
        example: 052f3b9b-cc02-418c-a9ab-8f49534c01c8
        type: string
    type: object
  clips.CreateClipRequest:
    description: Request body for creating a new audio clip. Audio URL is automatically
      retrieved from cached episode data. If episode not cached, it will be fetched
      from Podcast Index API and synced to database.
    properties:
      end_time:
        example: 45
        type: number
      label:
        example: advertisement
        minLength: 1
        type: string
      podcast_index_episode_id:
        example: 12345
        minimum: 1
        type: integer
      start_time:
        example: 30
        minimum: 0
        type: number
    required:
    - end_time
    - label
    - podcast_index_episode_id
    type: object
  clips.UpdateLabelRequest:
    description: Request body for updating a clip's label
    properties:
      label:
        example: music
        minLength: 1
        type: string
    required:
    - label
    type: object
  episodes.AnalysisResponse:
    properties:
      clip_uuids:
        example:
        - 052f3b9b-cc02-418c-a9ab-8f49534c01c8
        - 123e4567-e89b-12d3-a456-426614174000
        items:
          type: string
        type: array
      clips_created:
        example: 3
        type: integer
      episode_id:
        example: 12345
        type: integer
      message:
        example: Successfully analyzed episode and created 3 clips from volume spikes
        type: string
    type: object
  episodes.CreateClipRequest:
    properties:
      end_time:
        example: 45
        type: number
      label:
        example: advertisement
        minLength: 1
        type: string
      start_time:
        example: 30
        minimum: 0
        type: number
    required:
    - end_time
    - label
    type: object
  episodes.EpisodeClipResponse:
    properties:
      approved:
        example: true
        type: boolean
      auto_labeled:
        example: false
        type: boolean
      created_at:
        example: "2025-10-02T13:00:00Z"
        type: string
      duration:
        example: 15
        type: number
      error_message:
        example: ""
        type: string
      extracted:
        example: false
        type: boolean
      filename:
        example: clip_a1b2c3d4.wav
        type: string
      label:
        example: advertisement
        type: string
      label_confidence:
        example: 0.95
        type: number
      label_method:
        enum:
        - manual
        - peak_detection
        example: manual
        type: string
      original_end_time:
        example: 45
        type: number
      original_start_time:
        example: 30
        type: number
      size_bytes:
        example: 480332
        type: integer
      status:
        enum:
        - detected
        - queued
        - processing
        - ready
        - failed
        example: queued
        type: string
      updated_at:
        example: "2025-10-02T13:00:00Z"
        type: string
      uuid:
        example: a1b2c3d4-e5f6-4a7b-8c9d-0e1f2a3b4c5d
        type: string
    type: object
  episodes.Review:
    properties:
      author:
        example: User123
        type: string
      content:
        example: Love this show...
        type: string
      id:
        type: string
      rating:
        example: 5
        type: integer
      title:
        example: Best podcast ever!
        type: string
      updatedAt:
        type: string
      voteCount:
        example: 42
        type: integer
      voteSum:
        example: 38
        type: integer
    type: object
  episodes.ReviewData:
    properties:
      averageRating:
        example: 4.2
        type: number
      mostHelpful:
        items:
          $ref: '#/definitions/episodes.Review'
        type: array
      ratingDistribution:
        additionalProperties:
          type: integer
        type: object
      recentReviews:
        items:
          $ref: '#/definitions/episodes.Review'
        type: array
      totalCount:
        example: 487
        type: integer
    type: object
  episodes.ReviewsResponse:
    properties:
      cachedAt:
        type: string
      episodeId:
        example: 123456789
        type: integer
      itunesId:
        example: 1535809341
        type: integer
      message:
        type: string
      reviews:
        $ref: '#/definitions/episodes.ReviewData'
      status:
        example: success
        type: string
    type: object
  episodes.UpdateLabelRequest:
    properties:
      label:
        example: music
        minLength: 1
        type: string
    required:
    - label
    type: object
  models.EpisodeResponse:
    properties:
      description:
        type: string
      lang:
        description: Language parameter used
        type: string
      max:
        description: Max results parameter used (string to match PodcastIndex API)
        type: string
      notcat:
        description: Excluded categories
        items:
          type: string
        type: array
      results:
        items:
          $ref: '#/definitions/podcastindex.Episode'
        type: array
      status:
        type: string
      totalCount:
        type: integer
    type: object
  podcastindex.CategoriesResponse:
    properties:
      count:
        type: integer
      description:
        type: string
      feeds:
        items:
          $ref: '#/definitions/podcastindex.Category'
        type: array
      status:
        type: string
    type: object
  podcastindex.Category:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
  podcastindex.Episode:
    properties:
      chaptersUrl:
        type: string
      dateCrawled:
        type: integer
      datePublished:
        type: integer
      datePublishedPretty:
        type: string
      description:
        type: string
      duration:
        type: integer
      enclosureLength:
        type: integer
      enclosureType:
        type: string
      enclosureUrl:
        type: string
      episode:
        type: integer
      episodeType:
        type: string
      explicit:
        type: integer
      feedDead:
        type: integer
      feedDuplicateOf:
        type: integer
      feedId:
        type: integer
      feedImage:
        type: string
      feedItunesId:
        type: integer
      feedLanguage:
        type: string
      guid:
        type: string
      id:
        type: integer
      image:
        type: string
      link:
        type: string
      season:
        type: integer
      title:
        type: string
      transcriptUrl:
        type: string
    type: object
  types.Episode:
    properties:
      audioUrl:
        type: string
      chaptersUrl:
        type: string
      description:
        type: string
      duration:
        description: Seconds
        type: integer
      episode:
        description: Episode number
        type: integer
      id:
        description: Podcast Index Episode ID
        type: integer
      image:
        type: string
      link:
        description: Episode webpage URL
        type: string
      podcastId:
        description: Podcast Index Podcast ID
        type: integer
      publishedAt:
        description: Unix timestamp
        type: integer
      season:
        description: Season number
        type: integer
      title:
        type: string
      transcriptUrl:
        type: string
    type: object
  types.EpisodesResponse:
    properties:
      count:
        description: Number of results in this response
        type: integer
      episodes:
        items:
          $ref: '#/definitions/types.Episode'
        type: array
      message:
        description: Human-readable message
        type: string
      offset:
        type: integer
      status:
        description: One of the Status constants above
        type: string
      total:
        description: Total available (if known)
        type: integer
    type: object
  types.ErrorResponse:
    properties:
      details:
        description: Additional error details
      error:
        description: Error code/type
        type: string
      message:
        type: string
      status:
        type: string
    type: object
  types.JobStatusResponse:
    properties:
      episode_id:
        description: Episode ID
        type: integer
      error:
        description: Error message (only for failed status)
        type: string
      error_code:
        description: Specific error code like "403", "timeout", "corrupt_file" (only
          for failed jobs)
        type: string
      error_details:
        description: Technical error details for debugging (only for failed jobs)
        type: string
      error_type:
        description: 'Error type: "download", "processing", "system" (only for failed
          jobs)'
        type: string
      hint:
        description: Helpful hint for the client (e.g., "Use retry=true parameter")
        type: string
      job_id:
        description: Job ID (optional)
        type: integer
      max_retries:
        description: Maximum retry attempts (only for failed jobs)
        type: integer
      message:
        description: Human-readable message
        type: string
      progress:
        description: Progress 0-100
        type: integer
      retried:
        description: True if this was a manual retry (only when applicable)
        type: boolean
      retry_after:
        description: Seconds until retry (only for failed jobs)
        type: number
      retry_count:
        description: Number of retries attempted (only for failed jobs)
        type: integer
      status:
        description: 'Status: pending, processing, completed, failed, permanently_failed,
          not_found'
        type: string
    type: object
  types.Podcast:
    properties:
      author:
        type: string
      categories:
        items:
          type: string
        type: array
      description:
        type: string
      episodeCount:
        type: integer
      feedUrl:
        type: string
      id:
        description: Podcast Index ID
        type: integer
      image:
        type: string
      itunesId:
        type: integer
      language:
        type: string
      lastUpdated:
        description: Unix timestamp
        type: integer
      link:
        description: Podcast website URL
        type: string
      title:
        type: string
    type: object
  types.PodcastSearchResponse:
    properties:
      count:
        description: Number of results in this response
        type: integer
      message:
        description: Human-readable message
        type: string
      offset:
        type: integer
      podcasts:
        items:
          $ref: '#/definitions/types.Podcast'
        type: array
      query:
        type: string
      status:
        description: One of the Status constants above
        type: string
      total:
        description: Total available results (if known)
        type: integer
    type: object
  types.SearchRequest:
    properties:
      apOnly:
        description: Only return podcasts with iTunes ID
        example: false
        type: boolean
      clean:
        description: Only return non-explicit content
        example: false
        type: boolean
      fullText:
        example: false
        type: boolean
      limit:
        example: 10
        type: integer
      query:
        example: technology
        type: string
      val:
        description: Filter by value block type (e.g., "any", "lightning")
        example: any
        type: string
    required:
    - query
    type: object
  types.SingleEpisodeResponse:
    properties:
      episode:
        $ref: '#/definitions/types.Episode'
      message:
        description: Human-readable message
        type: string
      status:
        description: One of the Status constants above
        type: string
    type: object
  types.TranscriptionData:
    properties:
      cached:
        description: Whether data is cached - optional for some responses
        type: boolean
      duration:
        description: Duration in seconds
        example: 300.5
        type: number
      episode_id:
        description: Episode ID (optional for some responses)
        type: integer
      language:
        description: Detected or specified language
        example: en
        type: string
      model:
        description: Model used for transcription
        example: ggml-base.en.bin
        type: string
      source:
        description: '"fetched" or "generated" - optional for some responses'
        type: string
      text:
        description: Full transcription text
        example: This is the transcription...
        type: string
    type: object
  types.TrendingPodcastsResponse:
    properties:
      count:
        description: Number of results in this response
        type: integer
      message:
        description: Human-readable message
        type: string
      podcasts:
        items:
          $ref: '#/definitions/types.Podcast'
        type: array
      since:
        description: Hours back for trending calculation
        type: integer
      status:
        description: One of the Status constants above
        type: string
    type: object
  types.TrendingRequest:
    properties:
      categories:
        description: Category names/IDs to filter
        example:
        - News
        - Technology
        items:
          type: string
        type: array
      fullText:
        description: Return full descriptions
        example: false
        type: boolean
      lang:
        description: Language code
        example: en
        maxLength: 10
        type: string
      max:
        example: 10
        maximum: 100
        minimum: 1
        type: integer
      since:
        description: Hours ago (max 30 days)
        example: 24
        maximum: 720
        minimum: 1
        type: integer
    type: object
  types.Waveform:
    properties:
      data:
        items:
          type: number
        type: array
      duration:
        description: Total duration in seconds
        type: number
      episodeId:
        type: integer
      id:
        type: string
      sampleRate:
        type: integer
      status:
        type: string
    type: object
  types.WaveformResponse:
    properties:
      message:
        description: Human-readable message
        type: string
      status:
        description: One of the Status constants above
        type: string
      waveform:
        $ref: '#/definitions/types.Waveform'
    type: object
host: localhost:9000
info:
  contact:
    email: support@example.com
    name: Podcast Player API Support
    url: https://github.com/killallgit/killallplayer-api
  description: |-
    A REST API for podcast discovery and episode management.
    This API provides endpoints for searching podcasts, managing episodes,
    and generating waveforms for audio visualization.
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  title: Podcast Player API
  version: "1.0"
paths:
  /:
    get:
      consumes:
      - application/json
      description: Get version and basic information about the Podcast Player API
      produces:
      - application/json
      responses:
        "200":
          description: API version information
          schema:
            properties:
              description:
                type: string
              name:
                type: string
              status:
                type: string
              version:
                type: string
            type: object
      summary: Get API version
      tags:
      - version
  /api/v1/categories:
    get:
      consumes:
      - application/json
      description: Get a list of all available podcast categories from the Podcast
        Index API
      produces:
      - application/json
      responses:
        "200":
          description: Categories response
          schema:
            $ref: '#/definitions/podcastindex.CategoriesResponse'
        "500":
          description: Internal server error
          schema:
            properties:
              details:
                type: string
              message:
                type: string
              status:
                type: string
            type: object
      summary: Get all podcast categories
      tags:
      - categories
  /api/v1/clips:
    get:
      description: |-
        Retrieve a paginated list of clips with optional filtering by label and processing status.
        Results are ordered by creation time (newest first). Use this endpoint to monitor clip processing
        or to browse available training data by label.
      parameters:
      - description: Filter clips by exact label match (e.g., 'advertisement')
        in: query
        name: label
        type: string
      - description: Filter by processing status
        enum:
        - queued
        - processing
        - ready
        - failed
        in: query
        name: status
        type: string
      - default: 100
        description: Maximum number of clips to return (1-1000)
        in: query
        maximum: 1000
        minimum: 1
        name: limit
        type: integer
      - default: 0
        description: Number of clips to skip for pagination
        in: query
        minimum: 0
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of clips matching the filters
          schema:
            items:
              $ref: '#/definitions/clips.ClipResponse'
            type: array
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      summary: List clips with optional filtering
      tags:
      - clips
    post:
      consumes:
      - application/json
      description: |-
        Extract a labeled audio segment from a podcast episode for machine learning training datasets.
        The clip will be automatically converted to 16kHz mono WAV format, padded or cropped to 15 seconds,
        and stored with the specified label. Processing is asynchronous - the clip status will be "queued"
        initially, then "processing" when a worker picks it up, and finally "ready" when extraction completes or "failed" if an error occurs.
      parameters:
      - description: Audio clip extraction parameters with source URL and time range
          in seconds
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/clips.CreateClipRequest'
      produces:
      - application/json
      responses:
        "202":
          description: Clip creation accepted and processing started
          schema:
            $ref: '#/definitions/clips.ClipResponse'
        "400":
          description: Invalid request parameters (e.g., end_time <= start_time)
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal server error during clip creation
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      summary: Create a new audio clip for ML training
      tags:
      - clips
  /api/v1/clips/{uuid}:
    delete:
      description: |-
        Permanently delete a clip from the database and remove its associated audio file from storage.
        This operation cannot be undone. If the clip is already deleted, returns success (idempotent).
      parameters:
      - description: Unique clip identifier (UUID format)
        in: path
        name: uuid
        required: true
        type: string
      responses:
        "204":
          description: Clip deleted successfully (no content returned)
        "400":
          description: Invalid UUID format
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal server error during deletion
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      summary: Delete a clip and its audio file
      tags:
      - clips
    get:
      description: |-
        Retrieve detailed information about a specific clip including its processing status,
        audio properties, and label. Check the 'status' field to determine if the clip is ready for use.
      parameters:
      - description: Unique clip identifier (UUID format)
        in: path
        name: uuid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Clip details retrieved successfully
          schema:
            $ref: '#/definitions/clips.ClipResponse'
        "404":
          description: Clip with specified UUID not found
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      summary: Get clip details by UUID
      tags:
      - clips
  /api/v1/clips/{uuid}/label:
    put:
      consumes:
      - application/json
      description: |-
        Change the label of an existing clip to reorganize training datasets.
        This operation moves the clip file to a new label directory in storage.
        Labels can be any string value for flexible categorization (e.g., "advertisement", "music", "speech").
      parameters:
      - description: Unique clip identifier (UUID format)
        in: path
        name: uuid
        required: true
        type: string
      - description: New label for categorization
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/clips.UpdateLabelRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Label updated successfully
          schema:
            $ref: '#/definitions/clips.ClipResponse'
        "400":
          description: Invalid request (empty label or malformed JSON)
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "404":
          description: Clip with specified UUID not found
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal server error or storage operation failed
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      summary: Update a clip's label for re-categorization
      tags:
      - clips
  /api/v1/clips/export:
    get:
      description: |-
        Export all clips with status "ready" as a ZIP archive for machine learning training.
        The archive contains audio files organized by label directories and a JSONL manifest file
        with metadata for each clip. Audio files are in 16kHz mono WAV format, suitable for
        training models like Whisper or Wav2Vec2. The manifest includes clip UUID, label, duration,
        source URL, and original time range for full traceability.
      produces:
      - application/zip
      responses:
        "200":
          description: ZIP archive containing labeled audio clips and manifest.jsonl
          schema:
            type: file
        "500":
          description: Internal server error during export
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      summary: Export ML training dataset as ZIP
      tags:
      - clips
  /api/v1/episodes/{id}:
    get:
      consumes:
      - application/json
      description: |-
        Retrieve comprehensive episode information including title, description, audio URL, duration,
        and links to additional resources like transcripts and chapters. The episode data is fetched
        from the local database cache or Podcast Index API if not cached. Audio URLs are direct links
        suitable for streaming or download.
      parameters:
      - description: Episode's Podcast Index ID (unique identifier from Podcast Index
          API)
        example: 16797088990
        format: int64
        in: path
        minimum: 1
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Episode details including audio URL and metadata
          schema:
            $ref: '#/definitions/types.SingleEpisodeResponse'
        "400":
          description: Invalid ID format (must be positive integer)
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "404":
          description: Episode not found in database or Podcast Index API
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal server error or API communication failure
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      summary: Get episode details by Podcast Index ID
      tags:
      - episodes
  /api/v1/episodes/{id}/analyze:
    post:
      description: Scans the entire episode audio for volume anomalies (loud sections
        that may be ads or music) and automatically creates clips from detected spikes.
        Uses cached audio if available to avoid re-downloading. Created clips are
        labeled as 'volume_spike' for review.
      parameters:
      - description: Podcast Index Episode ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Analysis completed successfully with list of created clip UUIDs
          schema:
            $ref: '#/definitions/episodes.AnalysisResponse'
        "400":
          description: Invalid episode ID
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "404":
          description: Episode not found
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Analysis failed
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      summary: Analyze episode for volume spikes
      tags:
      - episodes
  /api/v1/episodes/{id}/clips:
    get:
      description: Get all clips created for this episode with optional status and
        approval filters
      parameters:
      - description: Episode ID
        in: path
        name: id
        required: true
        type: integer
      - description: Filter by status
        enum:
        - queued
        - processing
        - ready
        - failed
        - detected
        in: query
        name: status
        type: string
      - description: Filter by approval status (true/false)
        in: query
        name: approved
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/episodes.EpisodeClipResponse'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      summary: List clips for episode
      tags:
      - episodes
    post:
      consumes:
      - application/json
      description: Create a new audio clip from this episode at the specified time
        range. Manual clips are automatically approved and queued for extraction.
      parameters:
      - description: Episode ID
        in: path
        name: id
        required: true
        type: integer
      - description: Clip creation parameters
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/episodes.CreateClipRequest'
      produces:
      - application/json
      responses:
        "202":
          description: Clip created and queued for extraction (approved=true, status=queued)
          schema:
            $ref: '#/definitions/episodes.EpisodeClipResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      summary: Create clip for episode
      tags:
      - episodes
  /api/v1/episodes/{id}/clips/{uuid}:
    delete:
      description: Delete a clip and its audio file from this episode
      parameters:
      - description: Episode ID
        in: path
        name: id
        required: true
        type: integer
      - description: Clip UUID
        in: path
        name: uuid
        required: true
        type: string
      responses:
        "204":
          description: Deleted successfully
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      summary: Delete clip
      tags:
      - episodes
    get:
      description: Get details of a specific clip for this episode
      parameters:
      - description: Episode ID
        in: path
        name: id
        required: true
        type: integer
      - description: Clip UUID
        in: path
        name: uuid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/episodes.EpisodeClipResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      summary: Get clip details
      tags:
      - episodes
  /api/v1/episodes/{id}/clips/{uuid}/approve:
    put:
      description: Mark a clip as approved for extraction. This is used for clips
        created by analysis (status=detected, approved=false) to trigger audio extraction.
        Sets approved=true and queues the clip for processing.
      parameters:
      - description: Episode ID
        in: path
        name: id
        required: true
        type: integer
      - description: Clip UUID
        in: path
        name: uuid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Clip approved and queued for extraction
          schema:
            $ref: '#/definitions/episodes.EpisodeClipResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      summary: Approve clip for extraction
      tags:
      - episodes
  /api/v1/episodes/{id}/clips/{uuid}/label:
    put:
      consumes:
      - application/json
      description: Update the classification label for a clip
      parameters:
      - description: Episode ID
        in: path
        name: id
        required: true
        type: integer
      - description: Clip UUID
        in: path
        name: uuid
        required: true
        type: string
      - description: New label
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/episodes.UpdateLabelRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/episodes.EpisodeClipResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      summary: Update clip label
      tags:
      - episodes
  /api/v1/episodes/{id}/reviews:
    get:
      consumes:
      - application/json
      description: |-
        Fetch customer reviews from Apple Podcasts/iTunes for the podcast that contains this episode.
        Returns aggregated review data including total count, average rating, rating distribution,
        and individual reviews. Reviews can be sorted by recency or helpfulness. Note that not all
        podcasts have iTunes IDs, and some may have no reviews available.
      parameters:
      - description: Episode's Podcast Index ID
        format: int64
        in: path
        minimum: 1
        name: id
        required: true
        type: integer
      - default: mostrecent
        description: Sort order for reviews
        enum:
        - mostrecent
        - mosthelpful
        in: query
        name: sort
        type: string
      - default: 1
        description: Page number for pagination (iTunes limits to 10 pages max)
        in: query
        maximum: 10
        minimum: 1
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Reviews data with aggregated statistics and individual reviews
          schema:
            $ref: '#/definitions/episodes.ReviewsResponse'
        "404":
          description: Episode not found or podcast has no iTunes ID
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal server error or iTunes API failure
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      summary: Get iTunes reviews for episode's podcast
      tags:
      - episodes
  /api/v1/episodes/{id}/transcribe:
    get:
      consumes:
      - application/json
      description: |-
        Retrieve the full transcription text for a podcast episode if available. Transcriptions may come
        from two sources: 'fetched' (downloaded from podcast RSS feed transcriptURL) or 'generated' (created
        using Whisper speech-to-text). The response includes the full text, source type, language, and timestamps.
        Use POST /episodes/{id}/transcribe first to trigger generation if transcription doesn't exist.
      parameters:
      - description: Episode's Podcast Index ID
        format: int64
        in: path
        minimum: 1
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Full transcription text with metadata
          schema:
            $ref: '#/definitions/types.TranscriptionData'
        "400":
          description: Invalid episode ID format
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "404":
          description: No transcription available for this episode
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Database or service error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      summary: Get episode transcription text
      tags:
      - transcription
    post:
      consumes:
      - application/json
      description: |-
        Trigger transcription for a podcast episode. The system first checks if a transcript is available
        at the episode's transcriptURL (from RSS feed). If found, it fetches and stores it. Otherwise, if
        Whisper is configured, it generates a transcription using speech-to-text. Transcription is an async
        process that may take several minutes depending on episode duration. Use the job_id to track progress.
      parameters:
      - description: Episode's Podcast Index ID
        format: int64
        in: path
        minimum: 1
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Transcription already exists (check 'source' field for origin)
          schema:
            $ref: '#/definitions/types.JobStatusResponse'
        "202":
          description: Transcription job queued (includes job_id for tracking)
          schema:
            $ref: '#/definitions/types.JobStatusResponse'
        "400":
          description: Invalid episode ID format
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Service unavailable or configuration error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      summary: Generate or fetch episode transcription
      tags:
      - transcription
  /api/v1/episodes/{id}/transcribe/status:
    get:
      consumes:
      - application/json
      description: Check the status of transcription generation for an episode
      parameters:
      - description: Episode ID (Podcast Index ID)
        format: int64
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Transcription status
          schema:
            $ref: '#/definitions/types.JobStatusResponse'
        "400":
          description: Invalid Podcast Index Episode ID
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "404":
          description: Transcription not available
          schema:
            $ref: '#/definitions/types.JobStatusResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      summary: Get transcription generation status
      tags:
      - transcription
  /api/v1/episodes/{id}/waveform:
    get:
      consumes:
      - application/json
      description: |-
        Retrieve waveform data for audio visualization of a podcast episode. Waveform data consists of
        amplitude values (0-1 range) sampled at regular intervals, suitable for rendering audio waveform
        visualizations. If waveform doesn't exist, it will be automatically queued for generation and the
        response will include status:"pending" or "processing". Generation typically takes 10-60 seconds
        depending on episode duration. Poll this endpoint until status:"ready" to get the final data.
      parameters:
      - description: Episode's Podcast Index ID
        format: int64
        in: path
        minimum: 1
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Waveform ready with amplitude data array (status:ready)
          schema:
            $ref: '#/definitions/types.WaveformResponse'
        "202":
          description: Generation in progress (status:processing or pending)
          schema:
            $ref: '#/definitions/types.WaveformResponse'
        "400":
          description: Invalid episode ID format
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Waveform service error or database failure
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "503":
          description: Generation failed, automatic retry scheduled (status:failed)
          schema:
            $ref: '#/definitions/types.WaveformResponse'
      summary: Get audio waveform visualization data
      tags:
      - waveform
  /api/v1/me:
    get:
      description: Get current user information from Supabase JWT token
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/auth.UserInfo'
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get current user
      tags:
      - auth
  /api/v1/podcasts/{id}/episodes:
    get:
      consumes:
      - application/json
      description: |-
        Retrieve a list of episodes for a specific podcast using its Podcast Index ID (feedId).
        Episodes are returned in reverse chronological order (newest first). This endpoint
        automatically syncs with the Podcast Index API to ensure fresh data, then caches results.
        Use the podcast ID obtained from /search, /trending, or other podcast discovery endpoints.
      parameters:
      - description: Podcast's Podcast Index ID (feedId from search/trending results)
        example: 6780065
        format: int64
        in: path
        minimum: 1
        name: id
        required: true
        type: integer
      - default: 20
        description: Maximum episodes to return. Higher values may increase response
          time
        in: query
        maximum: 1000
        minimum: 1
        name: max
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of episodes with full metadata including audio URLs
          schema:
            $ref: '#/definitions/types.EpisodesResponse'
        "400":
          description: Invalid podcast ID format or out of range
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Failed to fetch episodes from Podcast Index API
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "503":
          description: Podcast Index API credentials not configured
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      summary: Get all episodes for a podcast
      tags:
      - podcasts
  /api/v1/random:
    get:
      description: Returns random podcast episodes from Podcast Index
      parameters:
      - description: Number of episodes to return (default 10, max 100)
        in: query
        name: limit
        type: integer
      - description: Language code (default 'en')
        in: query
        name: lang
        type: string
      - description: Comma-separated categories to exclude (e.g., 'News,Politics')
        in: query
        name: notcat
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.EpisodeResponse'
        "500":
          description: Internal server error
          schema:
            properties:
              description:
                type: string
              status:
                type: string
            type: object
      summary: Get random podcast episodes
      tags:
      - Random
  /api/v1/search:
    post:
      consumes:
      - application/json
      description: |-
        Search the Podcast Index for podcasts matching the query string. Returns podcast metadata
        including titles, descriptions, feed URLs, and iTunes IDs. Results can be filtered by various
        criteria such as value4value support, iTunes availability, and explicit content. Search uses
        the Podcast Index API which indexes millions of podcasts from RSS feeds worldwide.
      parameters:
      - description: Search parameters with query and optional filters
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/types.SearchRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Matching podcasts with metadata (feedId can be used with /podcasts/{id}/episodes)
          schema:
            $ref: '#/definitions/types.PodcastSearchResponse'
        "400":
          description: Invalid request format or missing required query field
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Search service error or API communication failure
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "504":
          description: Request timeout (search limited to 10 seconds)
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      summary: Search for podcasts by keyword
      tags:
      - search
  /api/v1/trending:
    post:
      consumes:
      - application/json
      description: |-
        Retrieve currently trending podcasts from Podcast Index based on recent activity and popularity.
        Results can be filtered by time period, categories, and language. Trending podcasts are determined
        by Podcast Index's algorithm which considers factors like new episodes, subscriber growth, and
        social media mentions. Use the returned podcast IDs (feedId) with /podcasts/{id}/episodes to get episodes.
      parameters:
      - description: Filter parameters (all optional - defaults to 10 podcasts from
          last 24 hours)
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/types.TrendingRequest'
      produces:
      - application/json
      responses:
        "200":
          description: List of trending podcasts with metadata
          schema:
            $ref: '#/definitions/types.TrendingPodcastsResponse'
        "400":
          description: Invalid request format or parameter values
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Failed to fetch trending data from Podcast Index API
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "504":
          description: Request timeout (limited to 10 seconds)
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      summary: Get trending podcasts with optional filters
      tags:
      - trending
  /health:
    get:
      consumes:
      - application/json
      description: Get the health status of the API server and database connection
      produces:
      - application/json
      responses:
        "200":
          description: Server health status
          schema:
            properties:
              database:
                type: object
              status:
                type: string
              timestamp:
                type: string
            type: object
      summary: Health check
      tags:
      - health
schemes:
- http
- https
swagger: "2.0"
tags:
- description: Health check endpoints
  name: health
- description: API version information
  name: version
- description: Podcast search functionality
  name: search
- description: Episode management and playback
  name: episodes
- description: Trending podcast discovery
  name: trending
- description: Podcast management and synchronization
  name: podcasts
- description: Audio waveform generation and retrieval
  name: waveform
- description: ML training audio clips extraction and management
  name: clips
