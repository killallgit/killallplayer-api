// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "Podcast Player API Support",
            "url": "https://github.com/killallgit/killallplayer-api",
            "email": "support@example.com"
        },
        "license": {
            "name": "MIT",
            "url": "https://opensource.org/licenses/MIT"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/": {
            "get": {
                "description": "Get version and basic information about the Podcast Player API",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "version"
                ],
                "summary": "Get API version",
                "responses": {
                    "200": {
                        "description": "API version information",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "description": {
                                    "type": "string"
                                },
                                "name": {
                                    "type": "string"
                                },
                                "status": {
                                    "type": "string"
                                },
                                "version": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/annotations/{uuid}": {
            "get": {
                "description": "Retrieve a specific annotation by its UUID, including clip status",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "annotations"
                ],
                "summary": "Get annotation by UUID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Annotation UUID",
                        "name": "uuid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Annotation details",
                        "schema": {
                            "$ref": "#/definitions/types.SingleAnnotationResponse"
                        }
                    },
                    "404": {
                        "description": "Annotation not found",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "Update an existing annotation's label, start time, or end time using UUID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "annotations"
                ],
                "summary": "Update annotation by UUID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Annotation UUID",
                        "name": "uuid",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated annotation data (label, start_time, end_time)",
                        "name": "annotation",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Annotation"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated annotation",
                        "schema": {
                            "$ref": "#/definitions/types.SingleAnnotationResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request or overlapping annotation",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Annotation not found",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete an existing annotation by UUID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "annotations"
                ],
                "summary": "Delete annotation by UUID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Annotation UUID",
                        "name": "uuid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Annotation deleted successfully",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "message": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Annotation not found",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/categories": {
            "get": {
                "description": "Get a list of all available podcast categories from the Podcast Index API",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "categories"
                ],
                "summary": "Get all podcast categories",
                "responses": {
                    "200": {
                        "description": "Categories response",
                        "schema": {
                            "$ref": "#/definitions/podcastindex.CategoriesResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "details": {
                                    "type": "string"
                                },
                                "message": {
                                    "type": "string"
                                },
                                "status": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/episodes/annotations/{id}": {
            "put": {
                "description": "Update an existing annotation's label, start time, or end time",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "annotations"
                ],
                "summary": "Update annotation",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Annotation ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated annotation data (label, start_time, end_time)",
                        "name": "annotation",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Annotation"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated annotation",
                        "schema": {
                            "$ref": "#/definitions/types.Annotation"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Annotation not found",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/episodes/{id}": {
            "get": {
                "description": "Retrieve a single episode by its Podcast Index ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "episodes"
                ],
                "summary": "Get episode by ID",
                "parameters": [
                    {
                        "minimum": 1,
                        "type": "integer",
                        "format": "int64",
                        "example": 123456789,
                        "description": "Episode Podcast Index ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Episode details",
                        "schema": {
                            "$ref": "#/definitions/types.SingleEpisodeResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request - invalid ID",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Episode not found",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/episodes/{id}/annotations": {
            "get": {
                "description": "Retrieve all annotations (labeled time segments) for a specific episode, ordered by start time",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "annotations"
                ],
                "summary": "Get annotations for episode",
                "parameters": [
                    {
                        "type": "integer",
                        "format": "int64",
                        "description": "Episode Podcast Index ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of annotations",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "annotations": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/types.Annotation"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid episode ID",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Episode not found",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new annotation (labeled time segment) for ML training on a specific episode",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "annotations"
                ],
                "summary": "Create annotation for episode",
                "parameters": [
                    {
                        "type": "integer",
                        "format": "int64",
                        "description": "Episode Podcast Index ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Annotation data (label, start_time, end_time)",
                        "name": "annotation",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Annotation"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created annotation",
                        "schema": {
                            "$ref": "#/definitions/types.Annotation"
                        }
                    },
                    "400": {
                        "description": "Invalid request or overlapping annotation",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Episode not found",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/episodes/{id}/reviews": {
            "get": {
                "description": "Fetch customer reviews from Apple Podcasts for the podcast that contains this episode",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "episodes"
                ],
                "summary": "Get podcast reviews",
                "parameters": [
                    {
                        "type": "integer",
                        "format": "int64",
                        "description": "Episode Podcast Index ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "default": "mostrecent",
                        "description": "Sort order: mostrecent or mosthelpful",
                        "name": "sort",
                        "in": "query"
                    },
                    {
                        "maximum": 10,
                        "minimum": 1,
                        "type": "integer",
                        "default": 1,
                        "description": "Page number (1-10)",
                        "name": "page",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Reviews data",
                        "schema": {
                            "$ref": "#/definitions/episodes.ReviewsResponse"
                        }
                    },
                    "404": {
                        "description": "Episode not found or no iTunes ID available",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/episodes/{id}/transcribe": {
            "get": {
                "description": "Retrieve the transcription text and metadata for an episode. Returns transcriptions that were either fetched from external URLs or generated via Whisper.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "transcription"
                ],
                "summary": "Get transcription data",
                "parameters": [
                    {
                        "type": "integer",
                        "format": "int64",
                        "description": "Episode ID (Podcast Index ID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Transcription data (includes source: 'fetched' or 'generated')",
                        "schema": {
                            "$ref": "#/definitions/types.TranscriptionData"
                        }
                    },
                    "400": {
                        "description": "Invalid episode ID",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Transcription not found",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Manually trigger transcription generation for a specific episode. Will first check for existing transcripts at the episode's transcriptURL before using Whisper.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "transcription"
                ],
                "summary": "Trigger transcription generation",
                "parameters": [
                    {
                        "type": "integer",
                        "format": "int64",
                        "description": "Episode ID (Podcast Index ID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Transcription already exists (source: 'fetched' or 'generated')",
                        "schema": {
                            "$ref": "#/definitions/types.JobStatusResponse"
                        }
                    },
                    "202": {
                        "description": "Transcription generation triggered",
                        "schema": {
                            "$ref": "#/definitions/types.JobStatusResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid episode ID",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/episodes/{id}/transcribe/status": {
            "get": {
                "description": "Check the status of transcription generation for an episode",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "transcription"
                ],
                "summary": "Get transcription generation status",
                "parameters": [
                    {
                        "type": "integer",
                        "format": "int64",
                        "description": "Episode ID (Podcast Index ID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Transcription status",
                        "schema": {
                            "$ref": "#/definitions/types.JobStatusResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid episode ID",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Transcription not available",
                        "schema": {
                            "$ref": "#/definitions/types.JobStatusResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/episodes/{id}/waveform": {
            "get": {
                "description": "Retrieve generated waveform data and status for a specific episode. If waveform doesn't exist, it will be queued for generation. Failed jobs are retried with exponential backoff.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "waveform"
                ],
                "summary": "Get waveform data and status for an episode",
                "parameters": [
                    {
                        "type": "integer",
                        "format": "int64",
                        "description": "Episode ID (Podcast Index ID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Waveform data retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/types.WaveformResponse"
                        }
                    },
                    "202": {
                        "description": "Waveform generation in progress or queued",
                        "schema": {
                            "$ref": "#/definitions/types.WaveformResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid episode ID",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "503": {
                        "description": "Waveform generation failed, retry pending",
                        "schema": {
                            "$ref": "#/definitions/types.WaveformResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/me": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get current user information from Supabase JWT token",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Get current user",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/auth.UserInfo"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/podcasts/{id}/episodes": {
            "get": {
                "description": "Retrieve all episodes for a specific podcast by its Podcast Index ID. This is the correct endpoint to use after getting podcast IDs from /trending.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "podcasts"
                ],
                "summary": "Get episodes for a podcast",
                "parameters": [
                    {
                        "minimum": 1,
                        "type": "integer",
                        "format": "int64",
                        "example": 6780065,
                        "description": "Podcast ID from trending or search results",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "maximum": 1000,
                        "minimum": 1,
                        "type": "integer",
                        "default": 20,
                        "description": "Maximum number of episodes to return (1-1000)",
                        "name": "max",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of episodes for the podcast",
                        "schema": {
                            "$ref": "#/definitions/types.EpisodesResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request - invalid podcast ID",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/random": {
            "get": {
                "description": "Returns random podcast episodes from Podcast Index",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Random"
                ],
                "summary": "Get random podcast episodes",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Number of episodes to return (default 10, max 100)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Language code (default 'en')",
                        "name": "lang",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Comma-separated categories to exclude (e.g., 'News,Politics')",
                        "name": "notcat",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.EpisodeResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "description": {
                                    "type": "string"
                                },
                                "status": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/search": {
            "post": {
                "description": "Search for podcasts by query string with optional filters for content type, iTunes presence, and explicit content",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "search"
                ],
                "summary": "Search for podcasts",
                "parameters": [
                    {
                        "description": "Search parameters",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.SearchRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Podcast search results",
                        "schema": {
                            "$ref": "#/definitions/types.PodcastSearchResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request - invalid parameters",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "504": {
                        "description": "Gateway timeout - search request timed out",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/trending": {
            "post": {
                "description": "Get trending podcasts with optional category filtering and other parameters",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "trending"
                ],
                "summary": "Get trending podcasts with filters",
                "parameters": [
                    {
                        "description": "Trending parameters",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.TrendingRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Trending podcasts",
                        "schema": {
                            "$ref": "#/definitions/types.TrendingPodcastsResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request - invalid parameters",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "504": {
                        "description": "Gateway timeout - trending request timed out",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/health": {
            "get": {
                "description": "Get the health status of the API server and database connection",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "health"
                ],
                "summary": "Health check",
                "responses": {
                    "200": {
                        "description": "Server health status",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "database": {
                                    "type": "object"
                                },
                                "status": {
                                    "type": "string"
                                },
                                "timestamp": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "auth.UserInfo": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "permissions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "role": {
                    "type": "string"
                }
            }
        },
        "episodes.Review": {
            "type": "object",
            "properties": {
                "author": {
                    "type": "string",
                    "example": "User123"
                },
                "content": {
                    "type": "string",
                    "example": "Love this show..."
                },
                "id": {
                    "type": "string"
                },
                "rating": {
                    "type": "integer",
                    "example": 5
                },
                "title": {
                    "type": "string",
                    "example": "Best podcast ever!"
                },
                "updatedAt": {
                    "type": "string"
                },
                "voteCount": {
                    "type": "integer",
                    "example": 42
                },
                "voteSum": {
                    "type": "integer",
                    "example": 38
                }
            }
        },
        "episodes.ReviewData": {
            "type": "object",
            "properties": {
                "averageRating": {
                    "type": "number",
                    "example": 4.2
                },
                "mostHelpful": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/episodes.Review"
                    }
                },
                "ratingDistribution": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "integer"
                    }
                },
                "recentReviews": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/episodes.Review"
                    }
                },
                "totalCount": {
                    "type": "integer",
                    "example": 487
                }
            }
        },
        "episodes.ReviewsResponse": {
            "type": "object",
            "properties": {
                "cachedAt": {
                    "type": "string"
                },
                "episodeId": {
                    "type": "integer",
                    "example": 123456789
                },
                "itunesId": {
                    "type": "integer",
                    "example": 1535809341
                },
                "message": {
                    "type": "string"
                },
                "reviews": {
                    "$ref": "#/definitions/episodes.ReviewData"
                },
                "status": {
                    "type": "string",
                    "example": "success"
                }
            }
        },
        "gorm.DeletedAt": {
            "type": "object",
            "properties": {
                "time": {
                    "type": "string"
                },
                "valid": {
                    "description": "Valid is true if Time is not NULL",
                    "type": "boolean"
                }
            }
        },
        "models.Annotation": {
            "type": "object",
            "properties": {
                "clip_path": {
                    "description": "Clip extraction fields",
                    "type": "string"
                },
                "clip_size": {
                    "description": "File size in bytes",
                    "type": "integer"
                },
                "clip_status": {
                    "description": "pending|processing|ready|failed",
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "deletedAt": {
                    "$ref": "#/definitions/gorm.DeletedAt"
                },
                "end_time": {
                    "description": "Time in seconds",
                    "type": "number"
                },
                "id": {
                    "type": "integer"
                },
                "label": {
                    "type": "string"
                },
                "podcast_index_episode_id": {
                    "description": "Use Podcast Index ID for consistency",
                    "type": "integer"
                },
                "start_time": {
                    "description": "Time in seconds",
                    "type": "number"
                },
                "updatedAt": {
                    "type": "string"
                },
                "uuid": {
                    "type": "string"
                }
            }
        },
        "models.EpisodeResponse": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "lang": {
                    "description": "Language parameter used",
                    "type": "string"
                },
                "max": {
                    "description": "Max results parameter used (string to match PodcastIndex API)",
                    "type": "string"
                },
                "notcat": {
                    "description": "Excluded categories",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "results": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/podcastindex.Episode"
                    }
                },
                "status": {
                    "type": "string"
                },
                "totalCount": {
                    "type": "integer"
                }
            }
        },
        "podcastindex.CategoriesResponse": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer"
                },
                "description": {
                    "type": "string"
                },
                "feeds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/podcastindex.Category"
                    }
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "podcastindex.Category": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "podcastindex.Episode": {
            "type": "object",
            "properties": {
                "chaptersUrl": {
                    "type": "string"
                },
                "dateCrawled": {
                    "type": "integer"
                },
                "datePublished": {
                    "type": "integer"
                },
                "datePublishedPretty": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "duration": {
                    "type": "integer"
                },
                "enclosureLength": {
                    "type": "integer"
                },
                "enclosureType": {
                    "type": "string"
                },
                "enclosureUrl": {
                    "type": "string"
                },
                "episode": {
                    "type": "integer"
                },
                "episodeType": {
                    "type": "string"
                },
                "explicit": {
                    "type": "integer"
                },
                "feedDead": {
                    "type": "integer"
                },
                "feedDuplicateOf": {
                    "type": "integer"
                },
                "feedId": {
                    "type": "integer"
                },
                "feedImage": {
                    "type": "string"
                },
                "feedItunesId": {
                    "type": "integer"
                },
                "feedLanguage": {
                    "type": "string"
                },
                "guid": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "image": {
                    "type": "string"
                },
                "link": {
                    "type": "string"
                },
                "season": {
                    "type": "integer"
                },
                "title": {
                    "type": "string"
                },
                "transcriptUrl": {
                    "type": "string"
                }
            }
        },
        "types.Annotation": {
            "type": "object",
            "properties": {
                "clipSize": {
                    "description": "Size in bytes",
                    "type": "integer"
                },
                "clipStatus": {
                    "description": "Clip extraction fields",
                    "type": "string"
                },
                "createdAt": {
                    "description": "ISO 8601",
                    "type": "string"
                },
                "endTime": {
                    "description": "Seconds",
                    "type": "number"
                },
                "episodeId": {
                    "description": "Keep JSON field name for API compatibility",
                    "type": "integer"
                },
                "id": {
                    "description": "UUID for stable reference",
                    "type": "string"
                },
                "label": {
                    "type": "string"
                },
                "startTime": {
                    "description": "Seconds",
                    "type": "number"
                },
                "text": {
                    "type": "string"
                },
                "updatedAt": {
                    "description": "ISO 8601",
                    "type": "string"
                }
            }
        },
        "types.Episode": {
            "type": "object",
            "properties": {
                "audioUrl": {
                    "type": "string"
                },
                "chaptersUrl": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "duration": {
                    "description": "Seconds",
                    "type": "integer"
                },
                "episode": {
                    "description": "Episode number",
                    "type": "integer"
                },
                "id": {
                    "description": "Podcast Index Episode ID",
                    "type": "integer"
                },
                "image": {
                    "type": "string"
                },
                "link": {
                    "description": "Episode webpage URL",
                    "type": "string"
                },
                "podcastId": {
                    "description": "Podcast Index Podcast ID",
                    "type": "integer"
                },
                "publishedAt": {
                    "description": "Unix timestamp",
                    "type": "integer"
                },
                "season": {
                    "description": "Season number",
                    "type": "integer"
                },
                "title": {
                    "type": "string"
                },
                "transcriptUrl": {
                    "type": "string"
                }
            }
        },
        "types.EpisodesResponse": {
            "type": "object",
            "properties": {
                "count": {
                    "description": "Number of results in this response",
                    "type": "integer"
                },
                "episodes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.Episode"
                    }
                },
                "message": {
                    "description": "Human-readable message",
                    "type": "string"
                },
                "offset": {
                    "type": "integer"
                },
                "status": {
                    "description": "One of the Status constants above",
                    "type": "string"
                },
                "total": {
                    "description": "Total available (if known)",
                    "type": "integer"
                }
            }
        },
        "types.ErrorResponse": {
            "type": "object",
            "properties": {
                "details": {
                    "description": "Additional error details"
                },
                "error": {
                    "description": "Error code/type",
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "types.JobStatusResponse": {
            "type": "object",
            "properties": {
                "episode_id": {
                    "description": "Episode ID",
                    "type": "integer"
                },
                "error": {
                    "description": "Error message (only for failed status)",
                    "type": "string"
                },
                "error_code": {
                    "description": "Specific error code like \"403\", \"timeout\", \"corrupt_file\" (only for failed jobs)",
                    "type": "string"
                },
                "error_details": {
                    "description": "Technical error details for debugging (only for failed jobs)",
                    "type": "string"
                },
                "error_type": {
                    "description": "Error type: \"download\", \"processing\", \"system\" (only for failed jobs)",
                    "type": "string"
                },
                "hint": {
                    "description": "Helpful hint for the client (e.g., \"Use retry=true parameter\")",
                    "type": "string"
                },
                "job_id": {
                    "description": "Job ID (optional)",
                    "type": "integer"
                },
                "max_retries": {
                    "description": "Maximum retry attempts (only for failed jobs)",
                    "type": "integer"
                },
                "message": {
                    "description": "Human-readable message",
                    "type": "string"
                },
                "progress": {
                    "description": "Progress 0-100",
                    "type": "integer"
                },
                "retried": {
                    "description": "True if this was a manual retry (only when applicable)",
                    "type": "boolean"
                },
                "retry_after": {
                    "description": "Seconds until retry (only for failed jobs)",
                    "type": "number"
                },
                "retry_count": {
                    "description": "Number of retries attempted (only for failed jobs)",
                    "type": "integer"
                },
                "status": {
                    "description": "Status: pending, processing, completed, failed, permanently_failed, not_found",
                    "type": "string"
                }
            }
        },
        "types.Podcast": {
            "type": "object",
            "properties": {
                "author": {
                    "type": "string"
                },
                "categories": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string"
                },
                "episodeCount": {
                    "type": "integer"
                },
                "feedUrl": {
                    "type": "string"
                },
                "id": {
                    "description": "Podcast Index ID",
                    "type": "integer"
                },
                "image": {
                    "type": "string"
                },
                "itunesId": {
                    "type": "integer"
                },
                "language": {
                    "type": "string"
                },
                "lastUpdated": {
                    "description": "Unix timestamp",
                    "type": "integer"
                },
                "link": {
                    "description": "Podcast website URL",
                    "type": "string"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "types.PodcastSearchResponse": {
            "type": "object",
            "properties": {
                "count": {
                    "description": "Number of results in this response",
                    "type": "integer"
                },
                "message": {
                    "description": "Human-readable message",
                    "type": "string"
                },
                "offset": {
                    "type": "integer"
                },
                "podcasts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.Podcast"
                    }
                },
                "query": {
                    "type": "string"
                },
                "status": {
                    "description": "One of the Status constants above",
                    "type": "string"
                },
                "total": {
                    "description": "Total available results (if known)",
                    "type": "integer"
                }
            }
        },
        "types.SearchRequest": {
            "type": "object",
            "required": [
                "query"
            ],
            "properties": {
                "apOnly": {
                    "description": "Only return podcasts with iTunes ID",
                    "type": "boolean",
                    "example": false
                },
                "clean": {
                    "description": "Only return non-explicit content",
                    "type": "boolean",
                    "example": false
                },
                "fullText": {
                    "type": "boolean",
                    "example": false
                },
                "limit": {
                    "type": "integer",
                    "example": 10
                },
                "query": {
                    "type": "string",
                    "example": "technology"
                },
                "val": {
                    "description": "Filter by value block type (e.g., \"any\", \"lightning\")",
                    "type": "string",
                    "example": "any"
                }
            }
        },
        "types.SingleAnnotationResponse": {
            "type": "object",
            "properties": {
                "annotation": {
                    "$ref": "#/definitions/types.Annotation"
                },
                "message": {
                    "description": "Human-readable message",
                    "type": "string"
                },
                "status": {
                    "description": "One of the Status constants above",
                    "type": "string"
                }
            }
        },
        "types.SingleEpisodeResponse": {
            "type": "object",
            "properties": {
                "episode": {
                    "$ref": "#/definitions/types.Episode"
                },
                "message": {
                    "description": "Human-readable message",
                    "type": "string"
                },
                "status": {
                    "description": "One of the Status constants above",
                    "type": "string"
                }
            }
        },
        "types.TranscriptionData": {
            "type": "object",
            "properties": {
                "cached": {
                    "description": "Whether data is cached - optional for some responses",
                    "type": "boolean"
                },
                "duration": {
                    "description": "Duration in seconds",
                    "type": "number",
                    "example": 300.5
                },
                "episode_id": {
                    "description": "Episode ID (optional for some responses)",
                    "type": "integer"
                },
                "language": {
                    "description": "Detected or specified language",
                    "type": "string",
                    "example": "en"
                },
                "model": {
                    "description": "Model used for transcription",
                    "type": "string",
                    "example": "ggml-base.en.bin"
                },
                "source": {
                    "description": "\"fetched\" or \"generated\" - optional for some responses",
                    "type": "string"
                },
                "text": {
                    "description": "Full transcription text",
                    "type": "string",
                    "example": "This is the transcription..."
                }
            }
        },
        "types.TrendingPodcastsResponse": {
            "type": "object",
            "properties": {
                "count": {
                    "description": "Number of results in this response",
                    "type": "integer"
                },
                "message": {
                    "description": "Human-readable message",
                    "type": "string"
                },
                "podcasts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.Podcast"
                    }
                },
                "since": {
                    "description": "Hours back for trending calculation",
                    "type": "integer"
                },
                "status": {
                    "description": "One of the Status constants above",
                    "type": "string"
                }
            }
        },
        "types.TrendingRequest": {
            "type": "object",
            "properties": {
                "categories": {
                    "description": "Category names/IDs to filter",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "News",
                        "Technology"
                    ]
                },
                "fullText": {
                    "description": "Return full descriptions",
                    "type": "boolean",
                    "example": false
                },
                "lang": {
                    "description": "Language code",
                    "type": "string",
                    "maxLength": 10,
                    "example": "en"
                },
                "max": {
                    "type": "integer",
                    "maximum": 100,
                    "minimum": 1,
                    "example": 10
                },
                "since": {
                    "description": "Hours ago (max 30 days)",
                    "type": "integer",
                    "maximum": 720,
                    "minimum": 1,
                    "example": 24
                }
            }
        },
        "types.Waveform": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "type": "number"
                    }
                },
                "duration": {
                    "description": "Total duration in seconds",
                    "type": "number"
                },
                "episodeId": {
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "sampleRate": {
                    "type": "integer"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "types.WaveformResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "description": "Human-readable message",
                    "type": "string"
                },
                "status": {
                    "description": "One of the Status constants above",
                    "type": "string"
                },
                "waveform": {
                    "$ref": "#/definitions/types.Waveform"
                }
            }
        }
    },
    "tags": [
        {
            "description": "Health check endpoints",
            "name": "health"
        },
        {
            "description": "API version information",
            "name": "version"
        },
        {
            "description": "Podcast search functionality",
            "name": "search"
        },
        {
            "description": "Episode management and playback",
            "name": "episodes"
        },
        {
            "description": "Trending podcast discovery",
            "name": "trending"
        },
        {
            "description": "Podcast management and synchronization",
            "name": "podcasts"
        },
        {
            "description": "Audio waveform generation and retrieval",
            "name": "waveform"
        },
        {
            "description": "ML training annotations for audio segments",
            "name": "annotations"
        }
    ]
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:9000",
	BasePath:         "/",
	Schemes:          []string{"http", "https"},
	Title:            "Podcast Player API",
	Description:      "A REST API for podcast discovery and episode management.\nThis API provides endpoints for searching podcasts, managing episodes,\nand generating waveforms for audio visualization.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
