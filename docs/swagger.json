{
    "schemes": [
        "http",
        "https"
    ],
    "swagger": "2.0",
    "info": {
        "description": "A REST API for podcast discovery, episode management, and audio streaming.\nThis API provides endpoints for searching podcasts, managing episodes, streaming audio,\nand generating waveforms for audio visualization.",
        "title": "Podcast Player API",
        "contact": {
            "name": "Podcast Player API Support",
            "url": "https://github.com/killallgit/killallplayer-api",
            "email": "support@example.com"
        },
        "license": {
            "name": "MIT",
            "url": "https://opensource.org/licenses/MIT"
        },
        "version": "1.0"
    },
    "host": "localhost:8080",
    "basePath": "/",
    "paths": {
        "/": {
            "get": {
                "description": "Get version and basic information about the Podcast Player API",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "version"
                ],
                "summary": "Get API version",
                "responses": {
                    "200": {
                        "description": "API version information",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "description": {
                                    "type": "string"
                                },
                                "name": {
                                    "type": "string"
                                },
                                "status": {
                                    "type": "string"
                                },
                                "version": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/categories": {
            "get": {
                "description": "Get a list of all available podcast categories from the Podcast Index API",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "categories"
                ],
                "summary": "Get all podcast categories",
                "responses": {
                    "200": {
                        "description": "Categories response",
                        "schema": {
                            "$ref": "#/definitions/podcastindex.CategoriesResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "details": {
                                    "type": "string"
                                },
                                "message": {
                                    "type": "string"
                                },
                                "status": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/episodes": {
            "get": {
                "description": "Get recent episodes across all podcasts with optional limit and podcast_id parameters",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "episodes"
                ],
                "summary": "Get all episodes",
                "parameters": [
                    {
                        "maximum": 1000,
                        "minimum": 1,
                        "type": "integer",
                        "default": 50,
                        "description": "Number of episodes to return (1-1000)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Filter episodes by podcast ID",
                        "name": "podcast_id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of episodes",
                        "schema": {
                            "$ref": "#/definitions/episodes.PodcastIndexResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/episodes.PodcastIndexErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/episodes/annotations/{id}": {
            "put": {
                "description": "Update an existing annotation's label, start time, or end time",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "annotations"
                ],
                "summary": "Update annotation",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Annotation ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated annotation data (label, start_time, end_time)",
                        "name": "annotation",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Annotation"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated annotation",
                        "schema": {
                            "$ref": "#/definitions/models.Annotation"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Annotation not found",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete an existing annotation by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "annotations"
                ],
                "summary": "Delete annotation",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Annotation ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Annotation deleted successfully",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "message": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid annotation ID",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Annotation not found",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/episodes/by-feed-url": {
            "get": {
                "description": "Get episodes for a specific podcast using its RSS feed URL",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "episodes"
                ],
                "summary": "Get episodes by feed URL",
                "parameters": [
                    {
                        "type": "string",
                        "format": "url",
                        "example": "\"https://feeds.buzzsprout.com/123456.rss\"",
                        "description": "RSS feed URL of the podcast",
                        "name": "url",
                        "in": "query",
                        "required": true
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "default": 20,
                        "description": "Maximum number of episodes to return (1-100)",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Podcast Index episodes response",
                        "schema": {
                            "$ref": "#/definitions/podcastindex.SearchResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request - missing or invalid feed URL",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/episodes/by-guid": {
            "get": {
                "description": "Retrieve a single episode by its GUID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "episodes"
                ],
                "summary": "Get episode by GUID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Episode GUID",
                        "name": "guid",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Episode details",
                        "schema": {
                            "$ref": "#/definitions/github_com_killallgit_player-api_api_episodes.EpisodeByGUIDResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request - missing GUID",
                        "schema": {
                            "$ref": "#/definitions/episodes.PodcastIndexErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Episode not found",
                        "schema": {
                            "$ref": "#/definitions/episodes.PodcastIndexErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/episodes.PodcastIndexErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/episodes/by-itunes-id": {
            "get": {
                "description": "Get episodes for a specific podcast using its iTunes/Apple Podcasts ID from Podcast Index API",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "episodes"
                ],
                "summary": "Get episodes by iTunes ID",
                "parameters": [
                    {
                        "minimum": 1,
                        "type": "integer",
                        "example": 1234567890,
                        "description": "iTunes/Apple Podcasts ID",
                        "name": "id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "default": 25,
                        "description": "Maximum number of episodes to return (1-100)",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Episodes from iTunes podcast",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "type": "object",
                                    "properties": {
                                        "count": {
                                            "type": "integer"
                                        },
                                        "episodes": {
                                            "type": "array",
                                            "items": {
                                                "type": "object"
                                            }
                                        },
                                        "limit": {
                                            "type": "integer"
                                        }
                                    }
                                },
                                "status": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request - missing or invalid iTunes ID",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/episodes/byfeedid": {
            "get": {
                "description": "Get episodes for a specific podcast using its feed ID (query parameter format for Podcast Index API compatibility)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "episodes"
                ],
                "summary": "Get episodes by feed ID",
                "parameters": [
                    {
                        "minimum": 1,
                        "type": "integer",
                        "example": 6780065,
                        "description": "Podcast feed ID",
                        "name": "id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "maximum": 1000,
                        "minimum": 1,
                        "type": "integer",
                        "default": 20,
                        "description": "Maximum number of episodes to return (1-1000)",
                        "name": "max",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of episodes for the podcast",
                        "schema": {
                            "$ref": "#/definitions/episodes.PodcastIndexResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request - missing or invalid feed ID",
                        "schema": {
                            "$ref": "#/definitions/episodes.PodcastIndexErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/episodes.PodcastIndexErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/episodes/recent": {
            "get": {
                "description": "Get the most recent episodes across all podcasts, sorted by publish date",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "episodes"
                ],
                "summary": "Get recent episodes",
                "parameters": [
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "default": 20,
                        "description": "Maximum number of episodes to return (1-100)",
                        "name": "max",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of recent episodes",
                        "schema": {
                            "$ref": "#/definitions/episodes.PodcastIndexResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/episodes.PodcastIndexErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/episodes/{id}": {
            "get": {
                "description": "Retrieve a single episode by its Podcast Index ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "episodes"
                ],
                "summary": "Get episode by ID",
                "parameters": [
                    {
                        "minimum": 1,
                        "type": "integer",
                        "format": "int64",
                        "example": 123456789,
                        "description": "Episode Podcast Index ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Episode details",
                        "schema": {
                            "$ref": "#/definitions/github_com_killallgit_player-api_api_episodes.EpisodeByGUIDResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request - invalid ID",
                        "schema": {
                            "$ref": "#/definitions/episodes.PodcastIndexErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Episode not found",
                        "schema": {
                            "$ref": "#/definitions/episodes.PodcastIndexErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/episodes.PodcastIndexErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/episodes/{id}/annotations": {
            "get": {
                "description": "Retrieve all annotations (labeled time segments) for a specific episode, ordered by start time",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "annotations"
                ],
                "summary": "Get annotations for episode",
                "parameters": [
                    {
                        "type": "integer",
                        "format": "int64",
                        "description": "Episode ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of annotations",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "annotations": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/models.Annotation"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid episode ID",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new annotation (labeled time segment) for ML training on a specific episode",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "annotations"
                ],
                "summary": "Create annotation for episode",
                "parameters": [
                    {
                        "type": "integer",
                        "format": "int64",
                        "description": "Episode ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Annotation data (label, start_time, end_time)",
                        "name": "annotation",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Annotation"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created annotation",
                        "schema": {
                            "$ref": "#/definitions/models.Annotation"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/episodes/{id}/transcribe": {
            "get": {
                "description": "Retrieve the transcription text and metadata for an episode. Returns transcriptions that were either fetched from external URLs or generated via Whisper.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "transcription"
                ],
                "summary": "Get transcription data",
                "parameters": [
                    {
                        "type": "integer",
                        "format": "int64",
                        "description": "Episode ID (Podcast Index ID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Transcription data (includes source: 'fetched' or 'generated')",
                        "schema": {
                            "$ref": "#/definitions/types.TranscriptionData"
                        }
                    },
                    "400": {
                        "description": "Invalid episode ID",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Transcription not found",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Manually trigger transcription generation for a specific episode. Will first check for existing transcripts at the episode's transcriptURL before using Whisper.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "transcription"
                ],
                "summary": "Trigger transcription generation",
                "parameters": [
                    {
                        "type": "integer",
                        "format": "int64",
                        "description": "Episode ID (Podcast Index ID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Transcription already exists (source: 'fetched' or 'generated')",
                        "schema": {
                            "$ref": "#/definitions/types.JobStatusResponse"
                        }
                    },
                    "202": {
                        "description": "Transcription generation triggered",
                        "schema": {
                            "$ref": "#/definitions/types.JobStatusResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid episode ID",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/episodes/{id}/transcribe/status": {
            "get": {
                "description": "Check the status of transcription generation for an episode",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "transcription"
                ],
                "summary": "Get transcription generation status",
                "parameters": [
                    {
                        "type": "integer",
                        "format": "int64",
                        "description": "Episode ID (Podcast Index ID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Transcription status",
                        "schema": {
                            "$ref": "#/definitions/types.JobStatusResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid episode ID",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Transcription not available",
                        "schema": {
                            "$ref": "#/definitions/types.JobStatusResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/episodes/{id}/waveform": {
            "get": {
                "description": "Retrieve generated waveform data for a specific episode. If waveform doesn't exist, it will be queued for generation. Failed jobs are retried with exponential backoff.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "waveform"
                ],
                "summary": "Get waveform data for an episode",
                "parameters": [
                    {
                        "type": "integer",
                        "format": "int64",
                        "description": "Episode ID (Podcast Index ID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Waveform data retrieved successfully (status='completed')",
                        "schema": {
                            "$ref": "#/definitions/types.WaveformData"
                        }
                    },
                    "202": {
                        "description": "Waveform generation in progress",
                        "schema": {
                            "$ref": "#/definitions/types.JobStatusResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid episode ID",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Episode or waveform not found",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "503": {
                        "description": "Waveform generation failed, retry pending (includes retry_after in seconds)",
                        "schema": {
                            "$ref": "#/definitions/types.JobStatusResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Manually trigger waveform generation for a specific episode. Implements retry logic with exponential backoff (30s, 60s, 120s) and max 3 retries. Use query parameter retry=true to manually retry failed/permanently failed jobs.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "waveform"
                ],
                "summary": "Trigger waveform generation",
                "parameters": [
                    {
                        "type": "integer",
                        "format": "int64",
                        "description": "Episode ID (Podcast Index ID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "boolean",
                        "description": "Force retry of failed or permanently failed job",
                        "name": "retry",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Waveform already exists or retry successful",
                        "schema": {
                            "$ref": "#/definitions/types.JobStatusResponse"
                        }
                    },
                    "202": {
                        "description": "Waveform generation triggered",
                        "schema": {
                            "$ref": "#/definitions/types.JobStatusResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid episode ID or retry parameter",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Job cannot be retried (not in failed state)",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "503": {
                        "description": "Previous generation failed, retry pending (includes retry_after, retry_count, max_retries)",
                        "schema": {
                            "$ref": "#/definitions/types.JobStatusResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/episodes/{id}/waveform/status": {
            "get": {
                "description": "Check the status of waveform generation for a specific episode",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "waveform"
                ],
                "summary": "Get waveform generation status",
                "parameters": [
                    {
                        "type": "integer",
                        "format": "int64",
                        "description": "Episode ID (Podcast Index ID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Status information",
                        "schema": {
                            "$ref": "#/definitions/types.WaveformData"
                        }
                    },
                    "400": {
                        "description": "Invalid episode ID",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Waveform not found or episode not found",
                        "schema": {
                            "$ref": "#/definitions/types.JobStatusResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/podcasts/by-feed-id": {
            "get": {
                "description": "Get podcast information using its feed ID from Podcast Index API",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "podcasts"
                ],
                "summary": "Get podcast by feed ID",
                "parameters": [
                    {
                        "minimum": 1,
                        "type": "integer",
                        "example": 6780065,
                        "description": "Podcast feed ID",
                        "name": "id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Podcast information",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "type": "object"
                                },
                                "status": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request - missing or invalid feed ID",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/podcasts/by-feed-url": {
            "get": {
                "description": "Get podcast information using its RSS feed URL from Podcast Index API",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "podcasts"
                ],
                "summary": "Get podcast by feed URL",
                "parameters": [
                    {
                        "type": "string",
                        "format": "url",
                        "example": "\"https://feeds.buzzsprout.com/123456.rss\"",
                        "description": "RSS feed URL of the podcast",
                        "name": "url",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Podcast information",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "type": "object"
                                },
                                "status": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request - missing or invalid feed URL",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/podcasts/by-itunes-id": {
            "get": {
                "description": "Get podcast information using its iTunes/Apple Podcasts ID from Podcast Index API",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "podcasts"
                ],
                "summary": "Get podcast by iTunes ID",
                "parameters": [
                    {
                        "minimum": 1,
                        "type": "integer",
                        "example": 1234567890,
                        "description": "iTunes/Apple Podcasts ID",
                        "name": "id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Podcast information",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "type": "object"
                                },
                                "status": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request - missing or invalid iTunes ID",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "message": {
                                    "type": "string"
                                },
                                "status": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "message": {
                                    "type": "string"
                                },
                                "status": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/podcasts/{id}/episodes": {
            "get": {
                "description": "Retrieve all episodes for a specific podcast by its Podcast Index ID. This is the correct endpoint to use after getting podcast IDs from /trending.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "podcasts"
                ],
                "summary": "Get episodes for a podcast",
                "parameters": [
                    {
                        "minimum": 1,
                        "type": "integer",
                        "example": 6780065,
                        "description": "Podcast ID from trending or search results",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "maximum": 1000,
                        "minimum": 1,
                        "type": "integer",
                        "default": 20,
                        "description": "Maximum number of episodes to return (1-1000)",
                        "name": "max",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of episodes for the podcast",
                        "schema": {
                            "$ref": "#/definitions/episodes.PodcastIndexResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request - invalid podcast ID",
                        "schema": {
                            "$ref": "#/definitions/episodes.PodcastIndexErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/episodes.PodcastIndexErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/podcasts/{id}/episodes/sync": {
            "post": {
                "description": "Manually trigger synchronization of episodes from Podcast Index API for a specific podcast",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "podcasts"
                ],
                "summary": "Sync episodes for podcast",
                "parameters": [
                    {
                        "minimum": 1,
                        "type": "integer",
                        "example": 6780065,
                        "description": "Podcast ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "maximum": 1000,
                        "minimum": 1,
                        "type": "integer",
                        "default": 50,
                        "description": "Maximum number of episodes to sync (1-1000)",
                        "name": "max",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Episodes successfully synced",
                        "schema": {
                            "$ref": "#/definitions/episodes.PodcastIndexResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request - invalid podcast ID",
                        "schema": {
                            "$ref": "#/definitions/episodes.PodcastIndexErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/episodes.PodcastIndexErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/random": {
            "get": {
                "description": "Returns random podcast episodes from Podcast Index",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Random"
                ],
                "summary": "Get random podcast episodes",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Number of episodes to return (default 10, max 100)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Language code (default 'en')",
                        "name": "lang",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Comma-separated categories to exclude (e.g., 'News,Politics')",
                        "name": "notcat",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.EpisodeResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "description": {
                                    "type": "string"
                                },
                                "status": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/search": {
            "post": {
                "description": "Search for podcasts by query string with optional result limit and full text",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "search"
                ],
                "summary": "Search for podcasts",
                "parameters": [
                    {
                        "description": "Search parameters",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.SearchRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Podcast search response with category summary",
                        "schema": {
                            "$ref": "#/definitions/models.PodcastSearchResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request - invalid parameters",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "details": {
                                    "type": "string"
                                },
                                "message": {
                                    "type": "string"
                                },
                                "status": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "details": {
                                    "type": "string"
                                },
                                "message": {
                                    "type": "string"
                                },
                                "status": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "504": {
                        "description": "Gateway timeout - search request timed out",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "message": {
                                    "type": "string"
                                },
                                "status": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/trending": {
            "get": {
                "description": "Get a list of trending podcasts from the Podcast Index API",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "trending"
                ],
                "summary": "Get trending podcasts",
                "parameters": [
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "default": 20,
                        "description": "Number of podcasts to return (1-100)",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Podcast trending response with category summary",
                        "schema": {
                            "$ref": "#/definitions/models.PodcastTrendingResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "description": {
                                    "type": "string"
                                },
                                "status": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Get trending podcasts with optional category filtering and other parameters",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "trending"
                ],
                "summary": "Get trending podcasts with filters",
                "parameters": [
                    {
                        "description": "Trending parameters",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.TrendingRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Podcast trending response with category summary",
                        "schema": {
                            "$ref": "#/definitions/models.PodcastTrendingResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request - invalid parameters",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "details": {
                                    "type": "string"
                                },
                                "message": {
                                    "type": "string"
                                },
                                "status": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "details": {
                                    "type": "string"
                                },
                                "message": {
                                    "type": "string"
                                },
                                "status": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "504": {
                        "description": "Gateway timeout - trending request timed out",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "message": {
                                    "type": "string"
                                },
                                "status": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/health": {
            "get": {
                "description": "Get the health status of the API server and database connection",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "health"
                ],
                "summary": "Health check",
                "responses": {
                    "200": {
                        "description": "Server health status",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "database": {
                                    "type": "object"
                                },
                                "status": {
                                    "type": "string"
                                },
                                "timestamp": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "episodes.Person": {
            "type": "object",
            "properties": {
                "group": {
                    "type": "string"
                },
                "href": {
                    "type": "string"
                },
                "img": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "role": {
                    "type": "string"
                }
            }
        },
        "episodes.PodcastIndexEpisode": {
            "type": "object",
            "properties": {
                "annotations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Annotation"
                    }
                },
                "chaptersUrl": {
                    "type": "string",
                    "example": "https://example.com/chapters/episode42.json"
                },
                "dateCrawled": {
                    "type": "integer",
                    "example": 1704067200
                },
                "datePublished": {
                    "type": "integer",
                    "example": 1704063600
                },
                "datePublishedPretty": {
                    "type": "string",
                    "example": "2024-01-01 00:00:00"
                },
                "description": {
                    "type": "string",
                    "example": "In this episode, we explore the meaning of life, the universe, and everything."
                },
                "duration": {
                    "type": "integer",
                    "example": 3600
                },
                "enclosureLength": {
                    "type": "integer",
                    "example": 52428800
                },
                "enclosureType": {
                    "type": "string",
                    "example": "audio/mpeg"
                },
                "enclosureUrl": {
                    "type": "string",
                    "example": "https://example.com/audio/episode42.mp3"
                },
                "episode": {
                    "type": "integer",
                    "example": 42
                },
                "episodeType": {
                    "type": "string",
                    "example": "full"
                },
                "explicit": {
                    "type": "integer",
                    "example": 0
                },
                "feedDead": {
                    "type": "integer",
                    "example": 0
                },
                "feedDuplicateOf": {
                    "type": "integer"
                },
                "feedId": {
                    "type": "integer",
                    "example": 123456
                },
                "feedImage": {
                    "type": "string",
                    "example": "https://example.com/podcast-cover.jpg"
                },
                "feedItunesId": {
                    "type": "integer",
                    "example": 987654321
                },
                "feedLanguage": {
                    "type": "string",
                    "example": "en"
                },
                "feedTitle": {
                    "type": "string",
                    "example": "The Tech Show"
                },
                "feedUrl": {
                    "type": "string",
                    "example": "https://example.com/rss.xml"
                },
                "guid": {
                    "type": "string",
                    "example": "episode-42-guid-string"
                },
                "id": {
                    "type": "integer",
                    "example": 123456789
                },
                "image": {
                    "type": "string",
                    "example": "https://example.com/episode42-cover.jpg"
                },
                "link": {
                    "type": "string",
                    "example": "https://example.com/episode/42"
                },
                "persons": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/episodes.Person"
                    }
                },
                "podcastGuid": {
                    "type": "string",
                    "example": "podcast-guid-string"
                },
                "season": {
                    "type": "integer",
                    "example": 2
                },
                "socialInteract": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/episodes.SocialInteraction"
                    }
                },
                "soundbite": {
                    "$ref": "#/definitions/episodes.Soundbite"
                },
                "soundbites": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/episodes.Soundbite"
                    }
                },
                "title": {
                    "type": "string",
                    "example": "Episode 42: The Answer to Everything"
                },
                "transcriptUrl": {
                    "type": "string",
                    "example": "https://example.com/transcripts/episode42.txt"
                },
                "transcripts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/episodes.Transcript"
                    }
                },
                "value": {
                    "$ref": "#/definitions/episodes.Value"
                }
            }
        },
        "episodes.PodcastIndexErrorResponse": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "status": {
                    "description": "\"false\"",
                    "type": "string"
                }
            }
        },
        "episodes.PodcastIndexResponse": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer",
                    "example": 10
                },
                "description": {
                    "type": "string",
                    "example": "Found 10 episodes"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/episodes.PodcastIndexEpisode"
                    }
                },
                "liveItems": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/episodes.PodcastIndexEpisode"
                    }
                },
                "query": {},
                "status": {
                    "description": "\"true\" or \"false\"",
                    "type": "string",
                    "example": "true"
                }
            }
        },
        "episodes.SocialInteraction": {
            "type": "object",
            "properties": {
                "accountId": {
                    "type": "string"
                },
                "accountUrl": {
                    "type": "string"
                },
                "platform": {
                    "type": "string"
                },
                "priority": {
                    "type": "integer"
                },
                "protocol": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                }
            }
        },
        "episodes.Soundbite": {
            "type": "object",
            "properties": {
                "duration": {
                    "type": "number"
                },
                "startTime": {
                    "type": "number"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "episodes.Transcript": {
            "type": "object",
            "properties": {
                "language": {
                    "type": "string"
                },
                "rel": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                }
            }
        },
        "episodes.Value": {
            "type": "object",
            "properties": {
                "destinations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/episodes.ValueDestination"
                    }
                },
                "model": {
                    "$ref": "#/definitions/episodes.ValueModel"
                }
            }
        },
        "episodes.ValueDestination": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "customKey": {
                    "type": "string"
                },
                "customValue": {
                    "type": "string"
                },
                "fee": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "split": {
                    "type": "integer"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "episodes.ValueModel": {
            "type": "object",
            "properties": {
                "method": {
                    "type": "string"
                },
                "suggested": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "github_com_killallgit_player-api_api_episodes.EpisodeByGUIDResponse": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string",
                    "example": "Episode found"
                },
                "episode": {
                    "$ref": "#/definitions/episodes.PodcastIndexEpisode"
                },
                "status": {
                    "type": "string",
                    "example": "true"
                }
            }
        },
        "gorm.DeletedAt": {
            "type": "object",
            "properties": {
                "time": {
                    "type": "string"
                },
                "valid": {
                    "description": "Valid is true if Time is not NULL",
                    "type": "boolean"
                }
            }
        },
        "models.Annotation": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "deletedAt": {
                    "$ref": "#/definitions/gorm.DeletedAt"
                },
                "end_time": {
                    "description": "Time in seconds",
                    "type": "number"
                },
                "episode": {
                    "description": "Relationship",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.Episode"
                        }
                    ]
                },
                "episode_id": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "label": {
                    "type": "string"
                },
                "start_time": {
                    "description": "Time in seconds",
                    "type": "number"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "models.Episode": {
            "type": "object",
            "properties": {
                "annotations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Annotation"
                    }
                },
                "audio_url": {
                    "description": "Media information",
                    "type": "string"
                },
                "chapters_url": {
                    "description": "Podcast 2.0 features",
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "date_crawled": {
                    "type": "string"
                },
                "deletedAt": {
                    "$ref": "#/definitions/gorm.DeletedAt"
                },
                "description": {
                    "type": "string"
                },
                "duration": {
                    "description": "Duration in seconds, nullable",
                    "type": "integer"
                },
                "enclosure_length": {
                    "type": "integer"
                },
                "enclosure_type": {
                    "type": "string"
                },
                "episode_number": {
                    "description": "Episode metadata",
                    "type": "integer"
                },
                "episode_type": {
                    "description": "full, trailer, bonus",
                    "type": "string"
                },
                "explicit": {
                    "description": "0=not explicit, 1=explicit",
                    "type": "integer"
                },
                "feed_image": {
                    "type": "string"
                },
                "feed_itunes_id": {
                    "type": "integer"
                },
                "feed_language": {
                    "type": "string"
                },
                "feed_title": {
                    "description": "Feed metadata (denormalized for performance)",
                    "type": "string"
                },
                "guid": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "image": {
                    "type": "string"
                },
                "link": {
                    "type": "string"
                },
                "podcast_id": {
                    "description": "Core episode fields",
                    "type": "integer"
                },
                "podcast_index_id": {
                    "description": "Podcast Index episode ID",
                    "type": "integer"
                },
                "published_at": {
                    "description": "Timestamps",
                    "type": "string"
                },
                "season": {
                    "type": "integer"
                },
                "title": {
                    "type": "string"
                },
                "transcript_url": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                },
                "waveform": {
                    "description": "Relationships",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.Waveform"
                        }
                    ]
                }
            }
        },
        "models.EpisodeResponse": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "lang": {
                    "description": "Language parameter used",
                    "type": "string"
                },
                "max": {
                    "description": "Max results parameter used (string to match PodcastIndex API)",
                    "type": "string"
                },
                "notcat": {
                    "description": "Excluded categories",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "results": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/podcastindex.Episode"
                    }
                },
                "status": {
                    "type": "string"
                },
                "totalCount": {
                    "type": "integer"
                }
            }
        },
        "models.PodcastResponse": {
            "type": "object",
            "properties": {
                "artwork": {
                    "type": "string"
                },
                "author": {
                    "type": "string"
                },
                "categories": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "categoryList": {
                    "description": "Array version of categories for client-side filtering",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "createdOn": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "episodeCount": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "image": {
                    "type": "string"
                },
                "imageUrlHash": {
                    "type": "integer"
                },
                "itunesId": {
                    "type": "integer"
                },
                "language": {
                    "type": "string"
                },
                "lastCrawlTime": {
                    "type": "integer"
                },
                "lastGoodHttpStatusCode": {
                    "type": "integer"
                },
                "lastParseTime": {
                    "type": "integer"
                },
                "lastUpdateTime": {
                    "type": "integer"
                },
                "link": {
                    "type": "string"
                },
                "locked": {
                    "type": "integer"
                },
                "originalUrl": {
                    "type": "string"
                },
                "ownerName": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                }
            }
        },
        "models.PodcastSearchResponse": {
            "type": "object",
            "properties": {
                "categorySummary": {
                    "description": "Category name -\u003e count",
                    "type": "object",
                    "additionalProperties": {
                        "type": "integer"
                    }
                },
                "description": {
                    "type": "string"
                },
                "query": {
                    "type": "string"
                },
                "results": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.PodcastResponse"
                    }
                },
                "status": {
                    "type": "string"
                },
                "totalCount": {
                    "type": "integer"
                }
            }
        },
        "models.PodcastTrendingResponse": {
            "type": "object",
            "properties": {
                "categorySummary": {
                    "description": "Category name -\u003e count",
                    "type": "object",
                    "additionalProperties": {
                        "type": "integer"
                    }
                },
                "description": {
                    "type": "string"
                },
                "max": {
                    "description": "Max results parameter used",
                    "type": "integer"
                },
                "results": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.PodcastResponse"
                    }
                },
                "since": {
                    "description": "Hours ago parameter used",
                    "type": "integer"
                },
                "status": {
                    "type": "string"
                },
                "totalCount": {
                    "type": "integer"
                }
            }
        },
        "models.SearchRequest": {
            "type": "object",
            "required": [
                "query"
            ],
            "properties": {
                "fullText": {
                    "description": "Return full descriptions instead of truncated",
                    "type": "boolean",
                    "example": false
                },
                "limit": {
                    "type": "integer",
                    "maximum": 100,
                    "minimum": 1,
                    "example": 10
                },
                "query": {
                    "type": "string",
                    "maxLength": 200,
                    "minLength": 1,
                    "example": "technology podcasts"
                }
            }
        },
        "models.TrendingRequest": {
            "type": "object",
            "properties": {
                "categories": {
                    "description": "Category names/IDs to filter",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "News",
                        "Technology"
                    ]
                },
                "fullText": {
                    "description": "Return full descriptions",
                    "type": "boolean",
                    "example": false
                },
                "lang": {
                    "description": "Language code",
                    "type": "string",
                    "maxLength": 10,
                    "example": "en"
                },
                "max": {
                    "type": "integer",
                    "maximum": 100,
                    "minimum": 1,
                    "example": 10
                },
                "since": {
                    "description": "Hours ago (max 30 days)",
                    "type": "integer",
                    "maximum": 720,
                    "minimum": 1,
                    "example": 24
                }
            }
        },
        "models.Waveform": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "deletedAt": {
                    "$ref": "#/definitions/gorm.DeletedAt"
                },
                "duration": {
                    "description": "Duration in seconds",
                    "type": "number"
                },
                "episode": {
                    "description": "Relationship",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.Episode"
                        }
                    ]
                },
                "episode_id": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "resolution": {
                    "description": "Number of peaks",
                    "type": "integer"
                },
                "sample_rate": {
                    "description": "Sample rate of original audio",
                    "type": "integer"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "podcastindex.CategoriesResponse": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer"
                },
                "description": {
                    "type": "string"
                },
                "feeds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/podcastindex.Category"
                    }
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "podcastindex.Category": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "podcastindex.Episode": {
            "type": "object",
            "properties": {
                "chaptersUrl": {
                    "type": "string"
                },
                "dateCrawled": {
                    "type": "integer"
                },
                "datePublished": {
                    "type": "integer"
                },
                "datePublishedPretty": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "duration": {
                    "type": "integer"
                },
                "enclosureLength": {
                    "type": "integer"
                },
                "enclosureType": {
                    "type": "string"
                },
                "enclosureUrl": {
                    "type": "string"
                },
                "episode": {
                    "type": "integer"
                },
                "episodeType": {
                    "type": "string"
                },
                "explicit": {
                    "type": "integer"
                },
                "feedDead": {
                    "type": "integer"
                },
                "feedDuplicateOf": {
                    "type": "integer"
                },
                "feedId": {
                    "type": "integer"
                },
                "feedImage": {
                    "type": "string"
                },
                "feedItunesId": {
                    "type": "integer"
                },
                "feedLanguage": {
                    "type": "string"
                },
                "guid": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "image": {
                    "type": "string"
                },
                "link": {
                    "type": "string"
                },
                "season": {
                    "type": "integer"
                },
                "title": {
                    "type": "string"
                },
                "transcriptUrl": {
                    "type": "string"
                }
            }
        },
        "podcastindex.Podcast": {
            "type": "object",
            "properties": {
                "artwork": {
                    "type": "string"
                },
                "author": {
                    "type": "string"
                },
                "categories": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "createdOn": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "episodeCount": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "image": {
                    "type": "string"
                },
                "imageUrlHash": {
                    "type": "integer"
                },
                "itunesId": {
                    "type": "integer"
                },
                "language": {
                    "type": "string"
                },
                "lastCrawlTime": {
                    "type": "integer"
                },
                "lastGoodHttpStatusCode": {
                    "type": "integer"
                },
                "lastParseTime": {
                    "type": "integer"
                },
                "lastUpdateTime": {
                    "type": "integer"
                },
                "link": {
                    "type": "string"
                },
                "locked": {
                    "type": "integer"
                },
                "originalUrl": {
                    "type": "string"
                },
                "ownerName": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                }
            }
        },
        "podcastindex.SearchResponse": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer"
                },
                "description": {
                    "type": "string"
                },
                "feeds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/podcastindex.Podcast"
                    }
                },
                "query": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "types.ErrorResponse": {
            "type": "object",
            "properties": {
                "details": {
                    "type": "string"
                },
                "error": {
                    "type": "string"
                }
            }
        },
        "types.JobStatusResponse": {
            "type": "object",
            "properties": {
                "episode_id": {
                    "description": "Episode ID",
                    "type": "integer"
                },
                "error": {
                    "description": "Error message (only for failed status)",
                    "type": "string"
                },
                "error_code": {
                    "description": "Specific error code like \"403\", \"timeout\", \"corrupt_file\" (only for failed jobs)",
                    "type": "string"
                },
                "error_details": {
                    "description": "Technical error details for debugging (only for failed jobs)",
                    "type": "string"
                },
                "error_type": {
                    "description": "Error type: \"download\", \"processing\", \"system\" (only for failed jobs)",
                    "type": "string"
                },
                "hint": {
                    "description": "Helpful hint for the client (e.g., \"Use retry=true parameter\")",
                    "type": "string"
                },
                "job_id": {
                    "description": "Job ID (optional)",
                    "type": "integer"
                },
                "max_retries": {
                    "description": "Maximum retry attempts (only for failed jobs)",
                    "type": "integer"
                },
                "message": {
                    "description": "Human-readable message",
                    "type": "string"
                },
                "progress": {
                    "description": "Progress 0-100",
                    "type": "integer"
                },
                "retried": {
                    "description": "True if this was a manual retry (only when applicable)",
                    "type": "boolean"
                },
                "retry_after": {
                    "description": "Seconds until retry (only for failed jobs)",
                    "type": "number"
                },
                "retry_count": {
                    "description": "Number of retries attempted (only for failed jobs)",
                    "type": "integer"
                },
                "status": {
                    "description": "Status: pending, processing, completed, failed, permanently_failed, not_found",
                    "type": "string"
                }
            }
        },
        "types.TranscriptionData": {
            "type": "object",
            "properties": {
                "cached": {
                    "description": "Whether data is cached - optional for some responses",
                    "type": "boolean"
                },
                "duration": {
                    "description": "Duration in seconds",
                    "type": "number",
                    "example": 300.5
                },
                "episode_id": {
                    "description": "Episode ID (optional for some responses)",
                    "type": "integer"
                },
                "language": {
                    "description": "Detected or specified language",
                    "type": "string",
                    "example": "en"
                },
                "model": {
                    "description": "Model used for transcription",
                    "type": "string",
                    "example": "ggml-base.en.bin"
                },
                "source": {
                    "description": "\"fetched\" or \"generated\" - optional for some responses",
                    "type": "string"
                },
                "text": {
                    "description": "Full transcription text",
                    "type": "string",
                    "example": "This is the transcription..."
                }
            }
        },
        "types.WaveformData": {
            "type": "object",
            "properties": {
                "cached": {
                    "description": "Whether data is cached - optional for some responses",
                    "type": "boolean"
                },
                "duration": {
                    "description": "Duration in seconds",
                    "type": "number",
                    "example": 300.5
                },
                "episode_id": {
                    "description": "Episode ID (optional for some responses)",
                    "type": "integer"
                },
                "peaks": {
                    "description": "Waveform peak values",
                    "type": "array",
                    "items": {
                        "type": "number"
                    },
                    "example": [
                        0.1,
                        0.2,
                        0.3
                    ]
                },
                "resolution": {
                    "description": "Number of peaks",
                    "type": "integer",
                    "example": 1000
                },
                "sample_rate": {
                    "description": "Sample rate in Hz - optional",
                    "type": "integer",
                    "example": 44100
                },
                "status": {
                    "description": "Status of the waveform (completed, processing, etc.) - optional for simple responses",
                    "type": "string"
                }
            }
        }
    },
    "tags": [
        {
            "description": "Health check endpoints",
            "name": "health"
        },
        {
            "description": "API version information",
            "name": "version"
        },
        {
            "description": "Podcast search functionality",
            "name": "search"
        },
        {
            "description": "Episode management and playback",
            "name": "episodes"
        },
        {
            "description": "Audio streaming with range request support",
            "name": "streaming"
        },
        {
            "description": "Trending podcast discovery",
            "name": "trending"
        },
        {
            "description": "Podcast management and synchronization",
            "name": "podcasts"
        },
        {
            "description": "Audio waveform generation and retrieval",
            "name": "waveform"
        },
        {
            "description": "ML training annotations for audio segments",
            "name": "annotations"
        }
    ]
}